{"version":3,"file":"ponyracer.component.spec.js","sourceRoot":"","sources":["ponyracer.component.spec.ts"],"names":[],"mappings":";AAAA,wBAOO,uBAAuB,CAAC,CAAA;AAC/B,wBAAuD,2BAA2B,CAAC,CAAA;AACnF,qBAA6D,eAAe,CAAC,CAAA;AAC7E,uBAAoD,iBAAiB,CAAC,CAAA;AACtE,wBAAsC,yBAAyB,CAAC,CAAA;AAChE,oCAAsC,uBAAuB,CAAC,CAAA;AAC9D,8BAAwB,iBAAiB,CAAC,CAAA;AAE1C,mBAAS,CAAC,gBAAgB,EAAE;IAE1B,IAAI,OAAgD,CAAC;IAErD,6BAAmB,CAAC,cAAM,OAAA;QACxB,cAAO,CAAC,qBAAc,EAAE,EAAC,QAAQ,EAAE,uBAAO,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC;QACzD,cAAO,CAAC,0BAAmB,EAAE,EAAC,QAAQ,EAAE,0BAAiB,EAAE,KAAK,EAAE,IAAI,EAAC,CAAC;KACzE,EAHyB,CAGzB,CAAC,CAAC;IAEH,oBAAU,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EACtC,UAAC,GAAyB,IAAK,OAAA,GAAG,CAAC,iBAAiB,CAAC,2CAAqB,EAAE;QACxE,cAAO,CAAC,yBAAgB,EAAE,EAAC,QAAQ,EAAE,+BAAqB,EAAC,CAAC;KAC7D,CAAC;SACD,WAAW,CAAC,2CAAqB,CAAC;SAClC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,GAAG,CAAC,EAAX,CAAW,CAAC,EAJM,CAIN,CAC1B,CAAC,CAAC;IAEH,YAAE,CAAC,qBAAqB,EAAE;QACxB,IAAI,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;QACpC,gBAAM,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  beforeEachProviders,\n  beforeEach,\n  xdescribe,\n  expect,\n  it,\n  inject\n} from '@angular/core/testing';\nimport { ComponentFixture, TestComponentBuilder } from '@angular/compiler/testing';\nimport { provide, PLATFORM_PIPES, PLATFORM_DIRECTIVES } from '@angular/core';\nimport { ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router';\nimport { ROUTER_FAKE_PROVIDERS } from '@angular/router/testing';\nimport { PonyracerAppComponent } from './ponyracer.component';\nimport { FromNow } from './from-now.pipe';\n\nxdescribe('App: Ponyracer', () => {\n\n  let fixture: ComponentFixture<PonyracerAppComponent>;\n\n  beforeEachProviders(() => [\n    provide(PLATFORM_PIPES, {useValue: FromNow, multi: true}),\n    provide(PLATFORM_DIRECTIVES, {useValue: ROUTER_DIRECTIVES, multi: true})\n  ]);\n\n  beforeEach(inject([TestComponentBuilder],\n    (tcb: TestComponentBuilder) => tcb.overrideProviders(PonyracerAppComponent, [\n        provide(ROUTER_PROVIDERS, {useValue: ROUTER_FAKE_PROVIDERS})\n      ])\n      .createAsync(PonyracerAppComponent)\n      .then(f => fixture = f)\n  ));\n\n  it('should have a title', () => {\n    let element = fixture.nativeElement;\n    expect(element.querySelector('h1')).toHaveText('Ponyracer');\n  });\n});\n"]}