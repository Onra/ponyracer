{"version":3,"file":"race.component.spec.js","sourceRoot":"","sources":["race.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  beforeEachProviders,\n  beforeEach,\n  describe,\n  expect,\n  it,\n  inject\n} from '@angular/core/testing';\nimport { ComponentFixture, TestComponentBuilder } from '@angular/compiler/testing';\nimport { By } from '@angular/platform-browser';\nimport { provide, PLATFORM_PIPES } from '@angular/core';\nimport { RaceComponent } from './race.component';\nimport { PonyComponent } from '../pony/pony.component';\nimport { FromNow } from '../from-now.pipe';\n\ndescribe('Component: Race', () => {\n\n  let fixture: ComponentFixture<RaceComponent>;\n\n  beforeEachProviders(() => [\n    provide(PLATFORM_PIPES, {useValue: FromNow, multi: true})\n  ]);\n\n  beforeEach(inject([TestComponentBuilder],\n    (tcb: TestComponentBuilder) => tcb\n      .overrideTemplate(PonyComponent, '<h3>{{ponyModel.name}}</h3>')\n      .createAsync(RaceComponent)\n      .then(f => fixture = f)\n  ));\n\n  it('should display a race name and its ponies', () => {\n    // given a race in Paris with 5 ponies\n    let raceComponent = fixture.componentInstance;\n    raceComponent.raceModel = {\n      name: 'Paris',\n      ponies: [\n        {name: 'Gentle Pie', color: 'YELLOW'},\n        {name: 'Big Soda', color: 'ORANGE'},\n        {name: 'Gentle Bottle', color: 'PURPLE'},\n        {name: 'Superb Whiskey', color: 'GREEN'},\n        {name: 'Fast Rainbow', color: 'BLUE'}\n      ],\n      startInstant: '2016-02-18T08:02:00Z'\n    };\n\n    // when triggering the change detection\n    fixture.detectChanges();\n\n    // then we should have the name and ponies displayed in the template\n    let directives = fixture.debugElement.queryAll(By.directive(PonyComponent));\n    expect(directives.length).toBe(5);\n    let element = fixture.nativeElement;\n    let raceName = element.querySelector('h2');\n    expect(raceName).toHaveText('Paris');\n    let startInstant = element.querySelector('p');\n    expect(startInstant.textContent).toContain('ago');\n    let ponies = element.querySelectorAll('h3');\n    expect(ponies.length).toBe(5);\n    expect(ponies[0]).toHaveText('Gentle Pie');\n    expect(ponies[1]).toHaveText('Big Soda');\n    expect(ponies[2]).toHaveText('Gentle Bottle');\n    expect(ponies[3]).toHaveText('Superb Whiskey');\n    expect(ponies[4]).toHaveText('Fast Rainbow');\n  });\n});\n\n"]}