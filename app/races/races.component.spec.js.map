{"version":3,"file":"races.component.spec.js","sourceRoot":"","sources":["races.component.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  beforeEachProviders,\n  beforeEach,\n  describe,\n  expect,\n  it,\n  inject\n} from '@angular/core/testing';\nimport { ComponentFixture, TestComponentBuilder } from '@angular/compiler/testing';\nimport { provide, PLATFORM_PIPES } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport { RacesComponent } from './races.component';\nimport { RaceService } from '../race.service';\nimport { FromNow } from '../from-now.pipe';\n\ndescribe('Component: Races', () => {\n\n  let fixture: ComponentFixture<RacesComponent>;\n  let service: RaceService = { list: () => {} } as RaceService;\n\n  beforeEachProviders(() => [\n    provide(PLATFORM_PIPES, {useValue: FromNow, multi: true})\n  ]);\n\n  beforeEach(inject([TestComponentBuilder],\n    (tcb: TestComponentBuilder) => {\n      spyOn(service, 'list').and.returnValue(Observable.of([\n        {name: 'Lyon'},\n        {name: 'Los Angeles'},\n        {name: 'Sidney'},\n        {name: 'Tokyo'},\n        {name: 'Casablanca'}\n      ]));\n      return tcb.overrideProviders(RacesComponent, [provide(RaceService, {useValue: service})])\n        .createAsync(RacesComponent)\n        .then(f => fixture = f);\n    }\n  ));\n\n  it('should display every race name in a title', () => {\n    fixture.detectChanges();\n\n    expect(fixture.componentInstance.races.length).toBe(5);\n    expect(fixture.componentInstance.races[0].name).toBe('Lyon');\n    expect(fixture.componentInstance.races[1].name).toBe('Los Angeles');\n    expect(fixture.componentInstance.races[2].name).toBe('Sidney');\n    expect(fixture.componentInstance.races[3].name).toBe('Tokyo');\n    expect(fixture.componentInstance.races[4].name).toBe('Casablanca');\n\n    let element = fixture.nativeElement;\n    let raceNames = element.querySelectorAll('h2');\n    expect(raceNames.length).toBe(4);\n    expect(raceNames[0]).toHaveText('Lyon');\n    expect(raceNames[1]).toHaveText('Los Angeles');\n    expect(raceNames[2]).toHaveText('Sidney');\n    expect(raceNames[3]).toHaveText('Tokyo');\n  });\n});\n"]}