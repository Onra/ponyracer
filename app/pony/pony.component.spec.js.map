{"version":3,"file":"pony.component.spec.js","sourceRoot":"","sources":["pony.component.spec.ts"],"names":[],"mappings":";AAAA,wBAMO,uBAAuB,CAAC,CAAA;AAC/B,wBAAuD,2BAA2B,CAAC,CAAA;AACnF,+BAA8B,kBAAkB,CAAC,CAAA;AAEjD,kBAAQ,CAAC,iBAAiB,EAAE;IAE1B,IAAI,OAAwC,CAAC;IAE7C,oBAAU,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EACtC,UAAC,GAAyB,IAAK,OAAA,GAAG,CAAC,WAAW,CAAC,8BAAa,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,OAAO,GAAG,CAAC,EAAX,CAAW,CAAC,EAArD,CAAqD,CACrF,CAAC,CAAC;IAEH,YAAE,CAAC,yCAAyC,EAAE;QAC5C,4CAA4C;QAC5C,IAAI,aAAa,GAAkB,IAAI,8BAAa,EAAE,CAAC;QACvD,aAAa,CAAC,SAAS,GAAG,EAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAC,CAAC;QAElE,sCAAsC;QACtC,IAAI,GAAG,GAAG,aAAa,CAAC,eAAe,EAAE,CAAC;QAE1C,iCAAiC;QACjC,gBAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,YAAE,CAAC,sCAAsC,EAAE;QACzC,4CAA4C;QAC5C,IAAI,aAAa,GAAkB,OAAO,CAAC,iBAAiB,CAAC;QAC7D,aAAa,CAAC,SAAS,GAAG,EAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAC,CAAC;QAElE,uCAAuC;QACvC,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,4CAA4C;QAC5C,IAAI,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;QACpC,IAAI,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,gBAAM,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QACnE,gBAAM,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACjE,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC7C,gBAAM,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,YAAE,CAAC,+BAA+B,EAAE;QAClC,4CAA4C;QAC5C,IAAI,aAAa,GAAkB,OAAO,CAAC,iBAAiB,CAAC;QAC7D,aAAa,CAAC,SAAS,GAAG,EAAC,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAC,CAAC;QAElE,aAAa,CAAC,WAAW,CAAC,SAAS,CAAC,UAAC,IAAI;YACvC,gBAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,+BAA+B;QAC/B,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,IAAI,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;QACpC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  beforeEach,\n  describe,\n  expect,\n  it,\n  inject,\n} from '@angular/core/testing';\nimport { ComponentFixture, TestComponentBuilder } from '@angular/compiler/testing';\nimport { PonyComponent } from './pony.component';\n\ndescribe('Component: Pony', () => {\n\n  let fixture: ComponentFixture<PonyComponent>;\n\n  beforeEach(inject([TestComponentBuilder],\n    (tcb: TestComponentBuilder) => tcb.createAsync(PonyComponent).then(f => fixture = f)\n  ));\n\n  it('should have method to get the image URL', () => {\n    // given a pony component with a PURPLE pony\n    let ponyComponent: PonyComponent = new PonyComponent();\n    ponyComponent.ponyModel = {name: 'Fast Rainbow', color: 'PURPLE'};\n\n    // when we call the method for the URL\n    let url = ponyComponent.getPonyImageUrl();\n\n    // then we should have a nice URL\n    expect(url).toBe('app/pony/pony-purple.gif');\n  });\n\n  it('should display an image and a legend', () => {\n    // given a pony component with a PURPLE pony\n    let ponyComponent: PonyComponent = fixture.componentInstance;\n    ponyComponent.ponyModel = {name: 'Fast Rainbow', color: 'PURPLE'};\n\n    // when we trigger the change detection\n    fixture.detectChanges();\n\n    // then we should have an image and a legend\n    let element = fixture.nativeElement;\n    let image = element.querySelector('img');\n    expect(image.getAttribute('src')).toBe('app/pony/pony-purple.gif');\n    expect(image.getAttribute('alt')).toBe('Image for Fast Rainbow');\n    let legend = element.querySelector('legend');\n    expect(legend).toHaveText('Fast Rainbow');\n  });\n\n  it('should emit an event on click', () => {\n    // given a pony component with a PURPLE pony\n    let ponyComponent: PonyComponent = fixture.componentInstance;\n    ponyComponent.ponyModel = {name: 'Fast Rainbow', color: 'PURPLE'};\n\n    ponyComponent.ponyClicked.subscribe((pony) => {\n      expect(pony).toBe(ponyComponent.ponyModel);\n    });\n\n    // when we click on the element\n    fixture.detectChanges();\n\n    let element = fixture.nativeElement;\n    element.querySelector('div').dispatchEvent(new Event('click'));\n  });\n\n});\n"]}